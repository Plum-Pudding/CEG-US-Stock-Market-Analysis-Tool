version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.8

commands:
  test_core:
    parameters:
      py:
        default: "310"
        type: string
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Install dependencies
          command: |
            cd packages/python/plotly
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip wheel
            pip install -r ./test_requirements/requirements_<<parameters.py>>_core.txt
      - run:
          name: Test core
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            pytest plotly/tests/test_core
          no_output_timeout: 20m

  test_optional:
    parameters:
      py:
        default: "310"
        type: string
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Install dependencies
          command: |
            cd packages/python/plotly
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip wheel
            pip install -r ./test_requirements/requirements_<<parameters.py>>_optional.txt
      - run:
          name: Install plotly-geo
          command: |
            cd packages/python/plotly-geo
            . ../plotly/venv/bin/activate
            pip install -e .
      - run:
          name: Test core
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            pytest plotly/tests/test_core
          no_output_timeout: 20m
      - run:
          name: Test optional
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            pytest plotly/tests/test_optional
          no_output_timeout: 40m
      - run:
          name: Test utils
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            pytest _plotly_utils/tests/
          no_output_timeout: 20m
      - run:
          name: Test io
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            pytest plotly/tests/test_io
          no_output_timeout: 20m
      - run:
          name: Test dependencdies not imported
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            pytest -x test_init/test_dependencies_not_imported.py
      - run:
          name: Test lazy imports
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            pytest -x test_init/test_lazy_imports.py
  test_orca:
    parameters:
      py:
        default: "310"
        type: string
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Install dependencies
          command: |
            cd packages/python/plotly
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip wheel
            pip install -r ./test_requirements/requirements_<<parameters.py>>_optional.txt
      - run:
          name: Install plotly-geo
          command: |
            cd packages/python/plotly-geo
            . ../plotly/venv/bin/activate
            pip install -e .
      - run:
          name: Install orca
          command: |
            npm install electron@1.8.4
            npm install orca
            sudo apt-get update
            sudo apt-get install -y poppler-utils libxtst6 xvfb libgtk2.0-0 libgconf-2-4 libnss3 libasound2 rename
            echo 'export PATH="/home/circleci/project/node_modules/.bin:$PATH"' >> $BASH_ENV
      - run:
          name: Test orca
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            pytest plotly/tests/test_orca
          no_output_timeout: 20m
      - store_artifacts:
          path: packages/python/plotly/plotly/tests/test_orca/images/linux/failed

jobs:
  check-code-formatting:
    docker:
      - image: cimg/python:3.7

    steps:
      - checkout
      - run:
          name: Install black
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install black==22.3.0
      - run:
          name: Check formatting with black
          command: |
            . venv/bin/activate
            black --check . --exclude venv

  # Core
  python_38_core:
    docker:
      - image: cimg/python:3.8-browsers
    steps:
      - test_core:
          py: "38"

  python_39_core:
    docker:
      - image: cimg/python:3.9-browsers
    steps:
      - test_core:
          py: "39"

  python_310_core:
    docker:
      - image: cimg/python:3.10-browsers
    steps:
      - test_core:
          py: "310"

  python_311_core:
    docker:
      - image: cimg/python:3.11-browsers
    steps:
      - test_core:
          py: "311"

  python_312_core:
    docker:
      - image: cimg/python:3.12-browsers
    steps:
      - test_core:
          py: "312"

  # Optional

  python_38_optional:
    docker:
      - image: cimg/python:3.8-browsers
    steps:
      - test_optional:
          py: "38"

  python_39_optional:
    docker:
      - image: cimg/python:3.9-browsers
    steps:
      - test_optional:
          py: "39"

  python_310_optional:
    docker:
      - image: cimg/python:3.10-browsers
    steps:
      - test_optional:
          py: "310"

  python_311_optional:
    docker:
      - image: cimg/python:3.11-browsers
    steps:
      - test_optional:
          py: "311"

  python_312_optional:
    docker:
      - image: cimg/python:3.12-browsers
    steps:
      - test_optional:
          py: "312"

  # Pandas

  python_39_pandas_2_optional:
    docker:
      - image: cimg/python:3.9-browsers
    steps:
      - test_optional:
          py: "39_pandas_2"

  # No numpy
  python_312_no_numpy:
    docker:
      - image: cimg/python:3.12-browsers
    steps:
      - run:
          name: Check that numpy is not installed
          command: |
            if pip list | grep numpy > /dev/null 2>&1
            then exit 1
            else exit 0
            fi
      - test_optional:
          py: "312_no_numpy"

  # Orca
  python_38_orca:
    docker:
      - image: cimg/python:3.8-browsers
    steps:
      - test_orca:
          py: "38"

  # Percy
  python_39_percy:
    docker:
      - image: cimg/python:3.9-browsers
        environment:
          PERCY_ENABLED: True
          PERCY_PROJECT: plotly/plotly.py
    resource_class: large

    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Inject Percy Environment variables
          command: |
            echo 'export PERCY_TOKEN="$PERCY_PYTHON_TOKEN_V0"' >> $BASH_ENV
      - run:
          name: Install requirements
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip wheel
            pip install -e ./packages/python/plotly
            pip install -e ./packages/python/plotly-geo
            pip install -r ./packages/python/plotly/test_requirements/requirements_39_pandas_2_optional.txt
      - run:
          name: Build html figures (Pandas 2)
          command: |
            . venv/bin/activate
            python test/percy/plotly-express.py
      - run:
          name: Build html figures (Pandas 1) and compare
          command: |
            . venv/bin/activate
            mkdir test/percy/pandas2
            mv test/percy/*.html test/percy/pandas2/
            # 1.1 is the earliest minor with Py3.9 wheels
            pip install "pandas==1.1.5"
            python test/percy/plotly-express.py
            python test/percy/compare-pandas.py
            rm -rf test/percy/pandas2
      - run:
          name: Run percy snapshots
          command: |
            npm i @percy/cli
            npx percy snapshot -c test/percy/snapshots.yml test/percy/
            rm test/percy/*.html

  # Chart studio
  python_38_chart_studio:
    docker:
      - image: cimg/python:3.8
    resource_class: large

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd packages/python/chart-studio
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip wheel
            pip install -r ./test_requirements/requirements_38.txt
      - run:
          name: Tests
          command: |
            cd packages/python/chart-studio
            . venv/bin/activate
            pytest -x chart_studio/tests/
          no_output_timeout: 20m

  plotlyjs_dev_build:
    docker:
      - image: cimg/python:3.8-node
        environment:
          LANG: en_US.UTF-8
    resource_class: large

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd packages/python/plotly
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip wheel
            pip install -r ./test_requirements/requirements_38_core.txt black inflect
            pip install jupyterlab~=3.0
      - run:
          name: Update jupyterlab-plotly version
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            python setup.py updateplotlywidgetversion
      - run:
          name: Update plotly.js to dev
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            python setup.py updateplotlyjsdev
      - run:
          name: Test core
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            locale
            pytest -k 'not nodev' plotly/tests/test_core
          no_output_timeout: 20m
      - run:
          name: Commit
          command: |
            cd packages/python/plotly
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            git add -A
            git commit -m "Codegen"
          when: always
      - run:
          name: Build source distribution packages
          command: |
            cd packages/python/plotly
            . venv/bin/activate
            python setup.py sdist
          when: always
      - store_artifacts:
          path: packages/python/plotly/dist

  full_build:
    docker:
      - image: continuumio/miniconda3:24.3.0-0
        environment:
          LANG: en_US.UTF-8
    resource_class: large

    steps:
      - checkout

      - run:
          name: Create conda environment
          command: |
            conda config --remove channels defaults
            conda config --add channels conda-forge
            conda create -n env --yes python=3.9 conda-build=3.28.4 conda-verify
            conda install -n env -c conda-forge jupyterlab=3 nodejs=16
            conda init bash
            mkdir output

      - run:
          name: initial NPM Build
          command: |
            eval "$(conda shell.bash hook)"
            conda activate env
            cd packages/javascript/jupyterlab-plotly
            npm ci
            npm run build:prod
            git status

      - run:
          name: PyPI Build
          command: |
            eval "$(conda shell.bash hook)"
            conda activate env
            cd packages/python/plotly
            python setup.py sdist bdist_wheel
            cp -R dist ../../../output/dist
            git status

      - run:
          name: Conda Build
          command: |
            eval "$(conda shell.bash hook)"
            conda activate env
            cd packages/python/plotly
            conda build recipe/
            mv /opt/conda/envs/env/conda-bld/noarch/plotly*.tar.bz2 ../../../output
            git status

      - run:
          name: NPM Pack
          command: |
            eval "$(conda shell.bash hook)"
            conda activate env
            cd packages/javascript/jupyterlab-plotly
            npm pack
            mv jupyterlab-plotly*.tgz ../../../output

      - run:
          name: Zip output
          command: |
            tar czf output.tgz output

      - run:
          name: Git Diff
          command: |
            git status
            git diff

      - store_artifacts:
          path: output.tgz

  build-doc:
    resource_class: xlarge
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, for example, `3.9-browsers`
      - image: cimg/python:3.9-browsers

    steps:
      - add_ssh_keys:
          fingerprints:
            - "dc:5f:39:48:00:b4:72:34:e1:d2:c4:e1:1f:d1:e2:ce" #plotlydocbot

      - checkout

      # Download and cache dependencies
      - restore_cache:
          key: v1-dependencies-{{ checksum "doc/requirements.txt" }}-{{ checksum ".circleci/config.yml" }}
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver

      - run:
          name: install dependencies
          command: |
            cd doc
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip wheel
            pip uninstall -y plotly
            pip install -r requirements.txt
            if [ "${CIRCLE_BRANCH}" != "doc-prod" ]; then
              pip uninstall -y plotly
              pip install -e ../packages/python/plotly
            fi
            cd ..
      - run:
          name: Install orca
          command: |
            npm install electron@1.8.4
            npm install orca
            sudo apt-get update
            sudo apt-get install -y poppler-utils libxtst6 xvfb libgtk2.0-0 libgconf-2-4 libnss3 libasound2 rename
            echo 'export PATH="/home/circleci/project/node_modules/.bin:$PATH"' >> $BASH_ENV

      - save_cache:
          paths:
            - ./doc/venv
            - ./doc/node_modules
          key: v1-dependencies-{{ checksum "doc/requirements.txt" }}-{{ checksum ".circleci/config.yml" }}

      - run:
          name: make html
          command: |
            cd doc
            . venv/bin/activate
            echo ${mapbox_token} > python/.mapbox_token
            make -kj8 || make -kj8
            curl https://raw.githubusercontent.com/plotly/graphing-library-docs/master/front-matter-ci.py > front-matter-ci.py
            curl https://raw.githubusercontent.com/plotly/graphing-library-docs/master/check-or-enforce-order.py > check-or-enforce-order.py
            python front-matter-ci.py build/html
            python check-or-enforce-order.py build/html
            if [ "${CIRCLE_BRANCH}" == "doc-prod" ]; then
              cd build/html
              git init
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git add *
              git commit -m "build of https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push --force git@github.com:plotly/plotly.py-docs.git master:built
              rm -rf .git
              cd ../..
              cd build/ipynb
              git init
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git add *
              git commit -m "build of https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push --force git@github.com:plotly/plotly.py-docs.git master:built_ipynb
              rm -rf .git
              cd ../..
            fi
            tar -zcf build/html.tgz build/html
            rm -rf build/html build/ipynb
            cd ..

      - run:
          name: trigger doc build
          command: |
            if [ "${CIRCLE_BRANCH}" == "doc-prod" ]; then
              git clone --depth=1 https://github.com/plotly/graphing-library-docs.git
              cd graphing-library-docs
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git commit --allow-empty -m "deploying https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push
              cd ..
              rm -rf graphing-library-docs
            fi

      - run:
          name: make doc
          command: |
            cd doc
            . venv/bin/activate
            # For the API doc, we need to use the local version of plotly
            # since we are tweaking the source because of
            # graph_objs/graph_objects
            if [ "${CIRCLE_BRANCH}" == "doc-prod" ]; then
              pip uninstall -y plotly
              cd ../packages/python/plotly
              pip install -e .
              cd ../../../doc
              cd apidoc
              make html
              cd _build/html
              touch .nojekyll
              git init
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git add *
              git add .nojekyll
              git commit -m "build of https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push --force git@github.com:plotly/plotly.py-docs.git master:gh-pages
              rm -rf .git
              cd ../..
            fi

      - store_artifacts:
          path: doc/build
          destination: doc/build
workflows:
  code_formatting:
    jobs:
      - check-code-formatting
  dev_build:
    jobs:
      - plotlyjs_dev_build
  release_build:
    jobs:
      - full_build

  build:
    jobs:
      - python_38_core
      - python_39_core
      - python_310_core
      - python_311_core
      - python_312_core
      - python_38_optional
      - python_39_optional
      - python_310_optional
      - python_311_optional
      - python_312_optional
      - python_39_pandas_2_optional
      - python_38_orca
      - python_39_percy
      - python_312_no_numpy
      - build-doc
