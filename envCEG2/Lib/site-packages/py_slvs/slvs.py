# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _slvs
else:
    import _slvs

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SLVS_FREE_IN_3D = _slvs.SLVS_FREE_IN_3D
class param(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    h = property(_slvs.param_h_get, _slvs.param_h_set)
    group = property(_slvs.param_group_get, _slvs.param_group_set)
    val = property(_slvs.param_val_get, _slvs.param_val_set)
    free = property(_slvs.param_free_get, _slvs.param_free_set)

    def __init__(self):
        _slvs.param_swiginit(self, _slvs.new_param())
    __swig_destroy__ = _slvs.delete_param

# Register param in _slvs:
_slvs.param_swigregister(param)

SLVS_E_POINT_IN_3D = _slvs.SLVS_E_POINT_IN_3D
SLVS_E_POINT_IN_2D = _slvs.SLVS_E_POINT_IN_2D
SLVS_E_NORMAL_IN_3D = _slvs.SLVS_E_NORMAL_IN_3D
SLVS_E_NORMAL_IN_2D = _slvs.SLVS_E_NORMAL_IN_2D
SLVS_E_DISTANCE = _slvs.SLVS_E_DISTANCE
SLVS_E_WORKPLANE = _slvs.SLVS_E_WORKPLANE
SLVS_E_LINE_SEGMENT = _slvs.SLVS_E_LINE_SEGMENT
SLVS_E_CUBIC = _slvs.SLVS_E_CUBIC
SLVS_E_CIRCLE = _slvs.SLVS_E_CIRCLE
SLVS_E_ARC_OF_CIRCLE = _slvs.SLVS_E_ARC_OF_CIRCLE
SLVS_E_TRANSFORM = _slvs.SLVS_E_TRANSFORM
class entity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    h = property(_slvs.entity_h_get, _slvs.entity_h_set)
    group = property(_slvs.entity_group_get, _slvs.entity_group_set)
    type = property(_slvs.entity_type_get, _slvs.entity_type_set)
    wrkpl = property(_slvs.entity_wrkpl_get, _slvs.entity_wrkpl_set)
    point = property(_slvs.entity_point_get, _slvs.entity_point_set)
    normal = property(_slvs.entity_normal_get, _slvs.entity_normal_set)
    distance = property(_slvs.entity_distance_get, _slvs.entity_distance_set)
    param = property(_slvs.entity_param_get, _slvs.entity_param_set)
    src = property(_slvs.entity_src_get, _slvs.entity_src_set)
    scale = property(_slvs.entity_scale_get, _slvs.entity_scale_set)
    timesApplied = property(_slvs.entity_timesApplied_get, _slvs.entity_timesApplied_set)
    asTrans = property(_slvs.entity_asTrans_get, _slvs.entity_asTrans_set)
    asAxisAngle = property(_slvs.entity_asAxisAngle_get, _slvs.entity_asAxisAngle_set)

    def __init__(self):
        _slvs.entity_swiginit(self, _slvs.new_entity())
    __swig_destroy__ = _slvs.delete_entity

# Register entity in _slvs:
_slvs.entity_swigregister(entity)

SLVS_C_POINTS_COINCIDENT = _slvs.SLVS_C_POINTS_COINCIDENT
SLVS_C_PT_PT_DISTANCE = _slvs.SLVS_C_PT_PT_DISTANCE
SLVS_C_PT_PLANE_DISTANCE = _slvs.SLVS_C_PT_PLANE_DISTANCE
SLVS_C_PT_LINE_DISTANCE = _slvs.SLVS_C_PT_LINE_DISTANCE
SLVS_C_PT_FACE_DISTANCE = _slvs.SLVS_C_PT_FACE_DISTANCE
SLVS_C_PT_IN_PLANE = _slvs.SLVS_C_PT_IN_PLANE
SLVS_C_PT_ON_LINE = _slvs.SLVS_C_PT_ON_LINE
SLVS_C_PT_ON_FACE = _slvs.SLVS_C_PT_ON_FACE
SLVS_C_EQUAL_LENGTH_LINES = _slvs.SLVS_C_EQUAL_LENGTH_LINES
SLVS_C_LENGTH_RATIO = _slvs.SLVS_C_LENGTH_RATIO
SLVS_C_EQ_LEN_PT_LINE_D = _slvs.SLVS_C_EQ_LEN_PT_LINE_D
SLVS_C_EQ_PT_LN_DISTANCES = _slvs.SLVS_C_EQ_PT_LN_DISTANCES
SLVS_C_EQUAL_ANGLE = _slvs.SLVS_C_EQUAL_ANGLE
SLVS_C_EQUAL_LINE_ARC_LEN = _slvs.SLVS_C_EQUAL_LINE_ARC_LEN
SLVS_C_SYMMETRIC = _slvs.SLVS_C_SYMMETRIC
SLVS_C_SYMMETRIC_HORIZ = _slvs.SLVS_C_SYMMETRIC_HORIZ
SLVS_C_SYMMETRIC_VERT = _slvs.SLVS_C_SYMMETRIC_VERT
SLVS_C_SYMMETRIC_LINE = _slvs.SLVS_C_SYMMETRIC_LINE
SLVS_C_AT_MIDPOINT = _slvs.SLVS_C_AT_MIDPOINT
SLVS_C_HORIZONTAL = _slvs.SLVS_C_HORIZONTAL
SLVS_C_VERTICAL = _slvs.SLVS_C_VERTICAL
SLVS_C_DIAMETER = _slvs.SLVS_C_DIAMETER
SLVS_C_PT_ON_CIRCLE = _slvs.SLVS_C_PT_ON_CIRCLE
SLVS_C_SAME_ORIENTATION = _slvs.SLVS_C_SAME_ORIENTATION
SLVS_C_ANGLE = _slvs.SLVS_C_ANGLE
SLVS_C_PARALLEL = _slvs.SLVS_C_PARALLEL
SLVS_C_PERPENDICULAR = _slvs.SLVS_C_PERPENDICULAR
SLVS_C_ARC_LINE_TANGENT = _slvs.SLVS_C_ARC_LINE_TANGENT
SLVS_C_CUBIC_LINE_TANGENT = _slvs.SLVS_C_CUBIC_LINE_TANGENT
SLVS_C_EQUAL_RADIUS = _slvs.SLVS_C_EQUAL_RADIUS
SLVS_C_PROJ_PT_DISTANCE = _slvs.SLVS_C_PROJ_PT_DISTANCE
SLVS_C_WHERE_DRAGGED = _slvs.SLVS_C_WHERE_DRAGGED
SLVS_C_CURVE_CURVE_TANGENT = _slvs.SLVS_C_CURVE_CURVE_TANGENT
SLVS_C_LENGTH_DIFFERENCE = _slvs.SLVS_C_LENGTH_DIFFERENCE
class constraint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    h = property(_slvs.constraint_h_get, _slvs.constraint_h_set)
    group = property(_slvs.constraint_group_get, _slvs.constraint_group_set)
    type = property(_slvs.constraint_type_get, _slvs.constraint_type_set)
    wrkpl = property(_slvs.constraint_wrkpl_get, _slvs.constraint_wrkpl_set)
    valA = property(_slvs.constraint_valA_get, _slvs.constraint_valA_set)
    ptA = property(_slvs.constraint_ptA_get, _slvs.constraint_ptA_set)
    ptB = property(_slvs.constraint_ptB_get, _slvs.constraint_ptB_set)
    entityA = property(_slvs.constraint_entityA_get, _slvs.constraint_entityA_set)
    entityB = property(_slvs.constraint_entityB_get, _slvs.constraint_entityB_set)
    entityC = property(_slvs.constraint_entityC_get, _slvs.constraint_entityC_set)
    entityD = property(_slvs.constraint_entityD_get, _slvs.constraint_entityD_set)
    other = property(_slvs.constraint_other_get, _slvs.constraint_other_set)
    other2 = property(_slvs.constraint_other2_get, _slvs.constraint_other2_set)

    def __init__(self):
        _slvs.constraint_swiginit(self, _slvs.new_constraint())
    __swig_destroy__ = _slvs.delete_constraint

# Register constraint in _slvs:
_slvs.constraint_swigregister(constraint)


def quaternionU(qw, qx, qy, qz):
    return _slvs.quaternionU(qw, qx, qy, qz)

def quaternionV(qw, qx, qy, qz):
    return _slvs.quaternionV(qw, qx, qy, qz)

def quaternionN(qw, qx, qy, qz):
    return _slvs.quaternionN(qw, qx, qy, qz)

def makeQuaternion(ux, uy, uz, vx, vy, vz):
    return _slvs.makeQuaternion(ux, uy, uz, vx, vy, vz)

def makeParam(h, group, val):
    return _slvs.makeParam(h, group, val)

def makePoint2d(h, group, wrkpl, u, v):
    return _slvs.makePoint2d(h, group, wrkpl, u, v)

def makePoint3d(h, group, x, y, z):
    return _slvs.makePoint3d(h, group, x, y, z)

def makeNormal3d(h, group, qw, qx, qy, qz):
    return _slvs.makeNormal3d(h, group, qw, qx, qy, qz)

def makeNormal2d(h, group, wrkpl):
    return _slvs.makeNormal2d(h, group, wrkpl)

def makeDistance(h, group, wrkpl, d):
    return _slvs.makeDistance(h, group, wrkpl, d)

def makeLineSegment(h, group, wrkpl, ptA, ptB):
    return _slvs.makeLineSegment(h, group, wrkpl, ptA, ptB)

def makeCubic(h, group, wrkpl, pt0, pt1, pt2, pt3):
    return _slvs.makeCubic(h, group, wrkpl, pt0, pt1, pt2, pt3)

def makeArcOfCircle(h, group, wrkpl, normal, center, start, end):
    return _slvs.makeArcOfCircle(h, group, wrkpl, normal, center, start, end)

def makeCircle(h, group, wrkpl, center, normal, radius):
    return _slvs.makeCircle(h, group, wrkpl, center, normal, radius)

def makeWorkplane(h, group, origin, normal):
    return _slvs.makeWorkplane(h, group, origin, normal)

def makeTransform(h, group, src, dx, dy, dz, qw, qx, qy, qz, asTrans, asAxisAngle, scale, timesApplied):
    return _slvs.makeTransform(h, group, src, dx, dy, dz, qw, qx, qy, qz, asTrans, asAxisAngle, scale, timesApplied)

def makeConstraint(h, group, type, wrkpl, valA, ptA, ptB, entityA, entityB):
    return _slvs.makeConstraint(h, group, type, wrkpl, valA, ptA, ptB, entityA, entityB)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _slvs.delete_SwigPyIterator

    def value(self):
        return _slvs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _slvs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _slvs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _slvs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _slvs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _slvs.SwigPyIterator_copy(self)

    def next(self):
        return _slvs.SwigPyIterator_next(self)

    def __next__(self):
        return _slvs.SwigPyIterator___next__(self)

    def previous(self):
        return _slvs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _slvs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _slvs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _slvs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _slvs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _slvs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _slvs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _slvs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _slvs:
_slvs.SwigPyIterator_swigregister(SwigPyIterator)

class Vec_hConstraint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _slvs.Vec_hConstraint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _slvs.Vec_hConstraint___nonzero__(self)

    def __bool__(self):
        return _slvs.Vec_hConstraint___bool__(self)

    def __len__(self):
        return _slvs.Vec_hConstraint___len__(self)

    def __getslice__(self, i, j):
        return _slvs.Vec_hConstraint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _slvs.Vec_hConstraint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _slvs.Vec_hConstraint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _slvs.Vec_hConstraint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _slvs.Vec_hConstraint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _slvs.Vec_hConstraint___setitem__(self, *args)

    def pop(self):
        return _slvs.Vec_hConstraint_pop(self)

    def append(self, x):
        return _slvs.Vec_hConstraint_append(self, x)

    def empty(self):
        return _slvs.Vec_hConstraint_empty(self)

    def size(self):
        return _slvs.Vec_hConstraint_size(self)

    def swap(self, v):
        return _slvs.Vec_hConstraint_swap(self, v)

    def begin(self):
        return _slvs.Vec_hConstraint_begin(self)

    def end(self):
        return _slvs.Vec_hConstraint_end(self)

    def rbegin(self):
        return _slvs.Vec_hConstraint_rbegin(self)

    def rend(self):
        return _slvs.Vec_hConstraint_rend(self)

    def clear(self):
        return _slvs.Vec_hConstraint_clear(self)

    def get_allocator(self):
        return _slvs.Vec_hConstraint_get_allocator(self)

    def pop_back(self):
        return _slvs.Vec_hConstraint_pop_back(self)

    def erase(self, *args):
        return _slvs.Vec_hConstraint_erase(self, *args)

    def __init__(self, *args):
        _slvs.Vec_hConstraint_swiginit(self, _slvs.new_Vec_hConstraint(*args))

    def push_back(self, x):
        return _slvs.Vec_hConstraint_push_back(self, x)

    def front(self):
        return _slvs.Vec_hConstraint_front(self)

    def back(self):
        return _slvs.Vec_hConstraint_back(self)

    def assign(self, n, x):
        return _slvs.Vec_hConstraint_assign(self, n, x)

    def resize(self, *args):
        return _slvs.Vec_hConstraint_resize(self, *args)

    def insert(self, *args):
        return _slvs.Vec_hConstraint_insert(self, *args)

    def reserve(self, n):
        return _slvs.Vec_hConstraint_reserve(self, n)

    def capacity(self):
        return _slvs.Vec_hConstraint_capacity(self)
    __swig_destroy__ = _slvs.delete_Vec_hConstraint

# Register Vec_hConstraint in _slvs:
_slvs.Vec_hConstraint_swigregister(Vec_hConstraint)

class System(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Failed = property(_slvs.System_Failed_get)
    GroupHandle = property(_slvs.System_GroupHandle_get, _slvs.System_GroupHandle_set)
    ParamHandle = property(_slvs.System_ParamHandle_get, _slvs.System_ParamHandle_set)
    EntityHandle = property(_slvs.System_EntityHandle_get, _slvs.System_EntityHandle_set)
    ConstraintHandle = property(_slvs.System_ConstraintHandle_get, _slvs.System_ConstraintHandle_set)
    Dof = property(_slvs.System_Dof_get)

    def __init__(self):
        _slvs.System_swiginit(self, _slvs.new_System())

    def reset(self):
        return _slvs.System_reset(self)

    def solve(self, group=0, reportFailed=False, findFreeParams=False):
        return _slvs.System_solve(self, group, reportFailed, findFreeParams)

    def getParam(self, h):
        return _slvs.System_getParam(self, h)

    def removeParam(self, h):
        return _slvs.System_removeParam(self, h)

    def addParam(self, v, overwrite=False):
        return _slvs.System_addParam(self, v, overwrite)

    def getConstraint(self, h):
        return _slvs.System_getConstraint(self, h)

    def removeConstraint(self, h):
        return _slvs.System_removeConstraint(self, h)

    def addConstraint(self, v, overwrite=False):
        return _slvs.System_addConstraint(self, v, overwrite)

    def getEntity(self, h):
        return _slvs.System_getEntity(self, h)

    def removeEntity(self, h):
        return _slvs.System_removeEntity(self, h)

    def addEntity(self, v, overwrite=False):
        return _slvs.System_addEntity(self, v, overwrite)

    def getEntityParam(self, h, idx):
        return _slvs.System_getEntityParam(self, h, idx)

    def setEntityParam(self, h, idx, hParam):
        return _slvs.System_setEntityParam(self, h, idx, hParam)

    def getEntityPoint(self, h, idx):
        return _slvs.System_getEntityPoint(self, h, idx)

    def setEntityPoint(self, h, idx, hEntity):
        return _slvs.System_setEntityPoint(self, h, idx, hEntity)

    def addParamV(self, val, group=0, h=0):
        return _slvs.System_addParamV(self, val, group, h)

    def addPoint2d(self, wrkpln, u, v, group=0, h=0):
        return _slvs.System_addPoint2d(self, wrkpln, u, v, group, h)

    def addPoint2dV(self, wrkpln, u, v, group=0, h=0):
        return _slvs.System_addPoint2dV(self, wrkpln, u, v, group, h)

    def addPoint3d(self, x, y, z, group=0, h=0):
        return _slvs.System_addPoint3d(self, x, y, z, group, h)

    def addPoint3dV(self, x, y, z, group=0, h=0):
        return _slvs.System_addPoint3dV(self, x, y, z, group, h)

    def addNormal3d(self, qw, qx, qy, qz, group=0, h=0):
        return _slvs.System_addNormal3d(self, qw, qx, qy, qz, group, h)

    def addNormal3dV(self, qw, qx, qy, qz, group=0, h=0):
        return _slvs.System_addNormal3dV(self, qw, qx, qy, qz, group, h)

    def addNormal2d(self, wrkpln, group=0, h=0):
        return _slvs.System_addNormal2d(self, wrkpln, group, h)

    def addDistance(self, d, group=0, h=0):
        return _slvs.System_addDistance(self, d, group, h)

    def addDistanceV(self, d, group=0, h=0):
        return _slvs.System_addDistanceV(self, d, group, h)

    def addLineSegment(self, p1, p2, group=0, h=0):
        return _slvs.System_addLineSegment(self, p1, p2, group, h)

    def addCubic(self, wrkpln, p1, p2, p3, p4, group=0, h=0):
        return _slvs.System_addCubic(self, wrkpln, p1, p2, p3, p4, group, h)

    def addArcOfCircle(self, wrkpln, center, start, end, group=0, h=0):
        return _slvs.System_addArcOfCircle(self, wrkpln, center, start, end, group, h)

    def addCircle(self, center, normal, radius, group=0, h=0):
        return _slvs.System_addCircle(self, center, normal, radius, group, h)

    def addCircleV(self, center, normal, radius, group=0, h=0):
        return _slvs.System_addCircleV(self, center, normal, radius, group, h)

    def addWorkplane(self, origin, normal, group=0, h=0):
        return _slvs.System_addWorkplane(self, origin, normal, group, h)

    def addTransform(self, src, dx, dy, dz, qw, qx, qy, qz, asAxisAngle=False, scale=1.0, timesApplied=0, group=0, h=0):
        return _slvs.System_addTransform(self, src, dx, dy, dz, qw, qx, qy, qz, asAxisAngle, scale, timesApplied, group, h)

    def addTranslate(self, src, dx, dy, dz, scale=1.0, timesApplied=0, group=0, h=0):
        return _slvs.System_addTranslate(self, src, dx, dy, dz, scale, timesApplied, group, h)

    def addConstraintV(self, tp, wrkpln, v, p1, p2, e1, e2, group=0, h=0):
        return _slvs.System_addConstraintV(self, tp, wrkpln, v, p1, p2, e1, e2, group, h)

    def addPointsDistance(self, d, p1, p2, wrkpln=0, group=0, h=0):
        return _slvs.System_addPointsDistance(self, d, p1, p2, wrkpln, group, h)

    def addPointsProjectDistance(self, d, p1, p2, line, group=0, h=0):
        return _slvs.System_addPointsProjectDistance(self, d, p1, p2, line, group, h)

    def addPointsCoincident(self, p1, p2, wrkpln=0, group=0, h=0):
        return _slvs.System_addPointsCoincident(self, p1, p2, wrkpln, group, h)

    def addPointPlaneDistance(self, d, pt, pln, group=0, h=0):
        return _slvs.System_addPointPlaneDistance(self, d, pt, pln, group, h)

    def addPointLineDistance(self, d, pt, line, wrkpln=0, group=0, h=0):
        return _slvs.System_addPointLineDistance(self, d, pt, line, wrkpln, group, h)

    def addPointInPlane(self, pt, pln, group=0, h=0):
        return _slvs.System_addPointInPlane(self, pt, pln, group, h)

    def addPointOnLine(self, pt, line, wrkpln=0, group=0, h=0):
        return _slvs.System_addPointOnLine(self, pt, line, wrkpln, group, h)

    def addEqualLength(self, l1, l2, wrkpln=0, group=0, h=0):
        return _slvs.System_addEqualLength(self, l1, l2, wrkpln, group, h)

    def addLengthRatio(self, ratio, l1, l2, wrkpln=0, group=0, h=0):
        return _slvs.System_addLengthRatio(self, ratio, l1, l2, wrkpln, group, h)

    def addLengthDifference(self, diff, l1, l2, wrkpln=0, group=0, h=0):
        return _slvs.System_addLengthDifference(self, diff, l1, l2, wrkpln, group, h)

    def addEqualLengthPointLineDistance(self, pt, l1, l2, wrkpln=0, group=0, h=0):
        return _slvs.System_addEqualLengthPointLineDistance(self, pt, l1, l2, wrkpln, group, h)

    def addEqualPointLineDistance(self, p1, l1, p2, l2, wrkpln=0, group=0, h=0):
        return _slvs.System_addEqualPointLineDistance(self, p1, l1, p2, l2, wrkpln, group, h)

    def addEqualAngle(self, supplement, l1, l2, l3, l4, wrkpln=0, group=0, h=0):
        return _slvs.System_addEqualAngle(self, supplement, l1, l2, l3, l4, wrkpln, group, h)

    def addEqualLineArcLength(self, line, arc, wrkpln=0, group=0, h=0):
        return _slvs.System_addEqualLineArcLength(self, line, arc, wrkpln, group, h)

    def addSymmetric(self, p1, p2, pln, wrkpln=0, group=0, h=0):
        return _slvs.System_addSymmetric(self, p1, p2, pln, wrkpln, group, h)

    def addSymmetricHorizontal(self, p1, p2, wrkpln, group=0, h=0):
        return _slvs.System_addSymmetricHorizontal(self, p1, p2, wrkpln, group, h)

    def addSymmetricVertical(self, p1, p2, wrkpln, group=0, h=0):
        return _slvs.System_addSymmetricVertical(self, p1, p2, wrkpln, group, h)

    def addSymmetricLine(self, p1, p2, line, wrkpln, group=0, h=0):
        return _slvs.System_addSymmetricLine(self, p1, p2, line, wrkpln, group, h)

    def addMidPoint(self, pt, line, wrkpln=0, group=0, h=0):
        return _slvs.System_addMidPoint(self, pt, line, wrkpln, group, h)

    def addPointsHorizontal(self, p1, p2, wrkpln, group=0, h=0):
        return _slvs.System_addPointsHorizontal(self, p1, p2, wrkpln, group, h)

    def addPointsVertical(self, p1, p2, wrkpln, group=0, h=0):
        return _slvs.System_addPointsVertical(self, p1, p2, wrkpln, group, h)

    def addLineHorizontal(self, line, wrkpln, group=0, h=0):
        return _slvs.System_addLineHorizontal(self, line, wrkpln, group, h)

    def addLineVertical(self, line, wrkpln, group=0, h=0):
        return _slvs.System_addLineVertical(self, line, wrkpln, group, h)

    def addDiameter(self, d, c, group=0, h=0):
        return _slvs.System_addDiameter(self, d, c, group, h)

    def addPointOnCircle(self, pt, circle, group=0, h=0):
        return _slvs.System_addPointOnCircle(self, pt, circle, group, h)

    def addSameOrientation(self, n1, n2, group=0, h=0):
        return _slvs.System_addSameOrientation(self, n1, n2, group, h)

    def addAngle(self, degree, supplement, l1, l2, wrkpln=0, group=0, h=0):
        return _slvs.System_addAngle(self, degree, supplement, l1, l2, wrkpln, group, h)

    def addPerpendicular(self, l1, l2, wrkpln=0, group=0, h=0):
        return _slvs.System_addPerpendicular(self, l1, l2, wrkpln, group, h)

    def addParallel(self, l1, l2, wrkpln=0, group=0, h=0):
        return _slvs.System_addParallel(self, l1, l2, wrkpln, group, h)

    def addArcLineTangent(self, atEnd, arc, line, group=0, h=0):
        return _slvs.System_addArcLineTangent(self, atEnd, arc, line, group, h)

    def addCubicLineTangent(self, atEnd, cubic, line, wrkpln=0, group=0, h=0):
        return _slvs.System_addCubicLineTangent(self, atEnd, cubic, line, wrkpln, group, h)

    def addCurvesTangent(self, atEnd1, atEnd2, c1, c2, wrkpln, group=0, h=0):
        return _slvs.System_addCurvesTangent(self, atEnd1, atEnd2, c1, c2, wrkpln, group, h)

    def addEqualRadius(self, c1, c2, group=0, h=0):
        return _slvs.System_addEqualRadius(self, c1, c2, group, h)

    def addWhereDragged(self, pt, wrkpln=0, group=0, h=0):
        return _slvs.System_addWhereDragged(self, pt, wrkpln, group, h)
    __swig_destroy__ = _slvs.delete_System

# Register System in _slvs:
_slvs.System_swigregister(System)



